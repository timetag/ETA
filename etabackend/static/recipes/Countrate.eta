{"vi_templatejg7rpkiv":"{\"nodes\":[{\"x\":114,\"y\":140,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0,1,2,3\"}],\"usercode\":\"HISTOGRAM(h1,(`bins`, `binsize`))\\nHISTOGRAM(h2,(`bins`, `binsize`))\\nHISTOGRAM(h3,(`bins`, `binsize`))\\nHISTOGRAM(h4,(`bins`, `binsize`))\\nCLOCK(c1)\\nCLOCK(c2)\\nCLOCK(c3)\\nCLOCK(c4)\\na--0-->a:\\n    c1.stop()\\n    h1.record(c1)\\na--1-->a:\\n    c2.stop()\\n    h2.record(c2)\\na--2-->a:\\n    c3.stop()\\n    h3.record(c3)\\na--3-->a:\\n    c4.stop()\\n    h4.record(c4)\"}","dpp_template_code":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n    \r\ndef info(filename, binsize=binsize, bins=bins):\r\n    return (f'Created with ETA - https://timetag.github.io\\n'\r\n            f'filename: {filename.name}\\n'\r\n            f'binsize: {binsize}\\n'\r\n            f'bins: {bins}\\n'\r\n            )\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        clips = eta.clips(f)\r\n        result=eta.run(clips, group='compile')\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        t3=result[\"h3\"]\r\n        t4=result[\"h4\"]\r\n        #hist1=np.sum(t1.reshape(-1, int(float(rebinsize))), axis=1) # apply extra binning (2343)\r\n        #hist2=np.sum(t2.reshape(-1, int(float(rebinsize))), axis=1)\r\n        \r\n        f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n        np.savetxt(f.parent.joinpath(datafolder, f.stem + '_countrate' +  '.txt'), np.transpose([np.arange(t1.size)/3600,t1,t2,t3,t4]), delimiter='\\t', header=info(f))\r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","eta_index_table":"[{\"id\":\"var_templatejkimp1dz\",\"name\":\"file\",\"group\":\"compile\",\"info\":\"\",\"config\":\"C:/YourFolder/YourFile.timeres\"},{\"id\":\"var_templatejkimp6ts\",\"name\":\"binsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"1e12\"},{\"id\":\"var_templatejkimp49t\",\"name\":\"bins\",\"group\":\"compile\",\"info\":\"\",\"config\":\"3600\"},{\"id\":\"var_templatejkimq3l9\",\"name\":\"rebinsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"1\"},{\"id\":\"dpp_templatejgmfdvub\",\"name\":\"display\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_template_code\",\"name\":\"txt_saver\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgxmbufn\",\"name\":\"graph_saver\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"vi_templatek70723ys\",\"name\":\"Timetagger\",\"group\":\"compile\",\"info\":\"ðŸ“œ[0, 1, 2, 3] \",\"config\":\"\"},{\"id\":\"vi_templatejg7rpkiv\",\"name\":\"countrate\",\"group\":\"compile\",\"info\":\"ðŸ“¥[0, 1, 2, 3] \",\"config\":\"\"}]","dpp_templatejgmfdvub":"#------IMPORTS-----\r\nimport numpy as np\r\nimport pandas as pd\r\nfrom pathlib import Path\r\nfrom bokeh.layouts import column, row\r\nfrom bokeh.models import ColumnDataSource, Slider, Range1d\r\nfrom bokeh.models.tools import HoverTool\r\nfrom bokeh.plotting import figure\r\nfrom bokeh.server.server import Server\r\nfrom bokeh.themes import Theme\r\nfrom bokeh.models.widgets import Tabs, Panel, Button\r\n\r\n#------ETA PROCESSING-----\r\nf = Path(file)\r\nclips = eta.clips(f)\r\nresult = eta.run(clips, group='compile')\r\n\r\nt1 = result[\"h1\"]\r\nt2 = result[\"h2\"]\r\nt3 = result[\"h3\"]\r\nt4 = result[\"h4\"]\r\n\r\nDATAFOLDER = 'analyzed data'\r\nLABEL = 'countrate'\r\n#------PLOTTING-----\r\nbinsize = int(float(1e12)) # accept bin size variable from left panel\r\nhist1 = np.sum(t1.reshape(-1, int(float(rebinsize))), axis=1) # apply extra binning (2343)\r\nhist2 = np.sum(t2.reshape(-1, int(float(rebinsize))), axis=1)\r\nhist3 = np.sum(t3.reshape(-1, int(float(rebinsize))), axis=1)\r\nhist4 = np.sum(t4.reshape(-1, int(float(rebinsize))), axis=1)\r\n\r\nxdata = np.arange(0,hist1.size)/60\r\ndf = pd.DataFrame(np.vstack((xdata, hist1, hist2, hist3, hist4)).T, \r\n                  columns=['time bins', 'ch1', 'ch2', 'ch3', 'ch4'])\r\n\r\ndef generate_doc(doc):\r\n    source = ColumnDataSource(df)\r\n    \r\n    def info():\r\n        return ('Created with ETA - https://timetag.github.io\\n'+'filename: {}\\n'.format(f.name)+'binsize: {}\\n'.format(binsize)+'bins: {}\\n'.format(bins))\r\n            \r\n    def style(p):\r\n        from bokeh.models import Range1d\r\n        # Title \r\n        p.title.text = 'Countrate'\r\n        p.title.align = 'center'\r\n        p.title.text_font_size = '20pt'\r\n        p.title.text_font = 'serif'\r\n\r\n        # Axis titles\r\n        p.xaxis.axis_label = 'Time delay (min)'\r\n        p.xaxis.axis_label_text_font_size = '14pt'\r\n        p.xaxis.axis_label_text_font_style = 'bold'\r\n        p.yaxis.axis_label = 'Histogram events'\r\n        p.yaxis.axis_label_text_font_size = '14pt'\r\n        p.yaxis.axis_label_text_font_style = 'bold'\r\n\r\n        # Tick labels\r\n        p.xaxis.major_label_text_font_size = '12pt'\r\n        p.yaxis.major_label_text_font_size = '12pt'\r\n        \r\n        # limit data range\r\n        p.x_range = Range1d(0, int(len(df['time bins'].values))/60, bounds=(0,None))\r\n        p.y_range = Range1d(0, max(df[['ch1','ch2', 'ch3', 'ch4']].max(axis=0).values)*1.2, bounds=(0,None))\r\n        \r\n        # remove padding\r\n        p.min_border_bottom = 0\r\n        p.min_border_left = 0\r\n        \r\n        # legend\r\n        p.legend.location = \"top_right\"\r\n        p.legend.click_policy=\"hide\"\r\n        \r\n        return p\r\n\r\n    def bokeh_button_save_callback():\r\n        global DATAFOLDER, LABEL\r\n        f.parent.joinpath(DATAFOLDER).mkdir(parents=True, exist_ok=True) # Create analyzed folder\r\n        # create unique index for file\r\n        file_index = 0\r\n        while f.parent.joinpath(DATAFOLDER, f\"{f.stem}_{LABEL}_{file_index:0=3d}.txt\").exists():\r\n            file_index += 1\r\n        np.savetxt(f.parent.joinpath(DATAFOLDER, f\"{f.stem}_{LABEL}_{file_index:0=3d}.txt\"),\r\n                           np.transpose([xdata, hist1, hist2, hist3, hist4]), delimiter='\\t', header=info())\r\n\r\n    def make_plot(src):\r\n        button_save = Button(label=\"Save\")\r\n        button_save.on_click(bokeh_button_save_callback)\r\n        save_button = row(button_save, sizing_mode='stretch_width')\r\n        # setup plot tools\r\n        hover=HoverTool(tooltips = [\r\n                    (\"Delay: \", \"@{time bins}\"),\r\n                    (\"Ch1\", \"@ch1\"),\r\n                    (\"Ch2\", \"@ch2\"),\r\n                    (\"Ch3\", \"@ch3\"),\r\n                    (\"Ch4\", \"@ch4\"),\r\n                    ],\r\n                    mode='vline', point_policy = \"snap_to_data\",\r\n                    line_policy = \"nearest\"\r\n                )\r\n        toolbox = \"pan,wheel_zoom,box_zoom,reset\"\r\n        # Blank plot\r\n        p = figure(plot_width = 700, plot_height = 700, tools=toolbox)\r\n        p.add_tools(hover)\r\n        # Add data\r\n        p.line(x='time bins', y='ch1', \r\n                source=src, color='firebrick', legend_label='ch1', line_width=2\r\n                )\r\n        p.line(x='time bins', y='ch2', \r\n                source=src, color='navy', legend_label='ch2', line_width=2\r\n                )\r\n        \r\n        p.line(x='time bins', y='ch3', \r\n                source=src, color='#bc5090', legend_label='ch3', line_width=2\r\n                )\r\n        p.line(x='time bins', y='ch4', \r\n                source=src, color='#ffa600', legend_label='ch4', line_width=2\r\n                )\r\n\r\n        # Styling\r\n        p = style(p)\r\n        return [p, save_button]\r\n\r\n    column_content = make_plot(source)\r\n    doc.add_root(column(column_content, sizing_mode='stretch_both'))\r\n    \r\n    return doc\r\n\r\neta.display(generate_doc, 'bokeh')\r\n","dpp_templatejgxmbufn":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ngraphsfolder='graphs'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        clips = eta.clips(f)\r\n        result=eta.run(clips, group='compile')\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        t3=result[\"h3\"]\r\n        t4=result[\"h4\"]\r\n        \r\n        x = np.arange(t1.size)/60 #display in h\r\n        \r\n        p1 = plt.bar(x,t1, width=1/60, color='crimson')\r\n        p2 = plt.bar(x,t2, width=1/60, bottom= t1, color='navy')\r\n        p3 = plt.bar(x,t3, width=1/60, bottom= t1+t2, color='#bc5090')\r\n        p4 = plt.bar(x,t4, width=1/60, bottom= t1+t2+t3, color='#ffa600')\r\n        \r\n        plt.ylabel('photon events')\r\n        plt.xlabel('time (min)')\r\n        \r\n        \r\n        list_of_title=str(f.stem).split('_')[:-1]\r\n        title='   '.join(list_of_title)\r\n        plt.title(title)\r\n        \r\n        f.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.eps'), format='eps', dpi=1200)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.png'), format='png', dpi=1200)\r\n        \r\n        plt.clf()\r\n        \r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","var_templatejkimp1dz":null,"var_templatejkimp49t":null,"var_templatejkimp6ts":null,"var_templatejkimq3l9":null,"ri_templatejkimu3sj":null,"vi_templatek70723ys":"{\"nodes\":[{\"x\":107,\"y\":38,\"fixed\":true,\"initial\":true,\"px\":107,\"py\":38}],\"edges\":[],\"usercode\":\"RFILE(timetagger1)\"}"}
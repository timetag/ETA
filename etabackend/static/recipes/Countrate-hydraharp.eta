{"vi_templatejg7rpkiv":"{\"nodes\":[{\"x\":114,\"y\":140,\"fixed\":true,\"text\":\"a\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0,1,2,3,4,5,6,7\"}],\"usercode\":\"HISTOGRAM(h0,(`bins`, `binsize`))\\nHISTOGRAM(h1,(`bins`, `binsize`))\\nHISTOGRAM(h2,(`bins`, `binsize`))\\nHISTOGRAM(h3,(`bins`, `binsize`))\\nHISTOGRAM(h4,(`bins`, `binsize`))\\nHISTOGRAM(h5,(`bins`, `binsize`))\\nHISTOGRAM(h6,(`bins`, `binsize`))\\nHISTOGRAM(h7,(`bins`, `binsize`))\\nCLOCK(c0)\\nCLOCK(c1)\\nCLOCK(c2)\\nCLOCK(c3)\\nCLOCK(c4)\\nCLOCK(c5)\\nCLOCK(c6)\\nCLOCK(c7)\\na--0-->a:\\n    c0.stop()\\n    h0.record(c0)\\na--1-->a:\\n    c1.stop()\\n    h1.record(c1)\\na--2-->a:\\n    c2.stop()\\n    h2.record(c2)\\na--3-->a:\\n    c3.stop()\\n    h3.record(c3)\\na--4-->a:\\n    c4.stop()\\n    h4.record(c4)\\na--5-->a:\\n    c5.stop()\\n    h5.record(c5)\\na--6-->a:\\n    c6.stop()\\n    h6.record(c6)\\na--7-->a:\\n    c7.stop()\\n    h7.record(c7)\"}","dpp_template_code":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n    \r\ndef info(filename, binsize=binsize, bins=bins):\r\n    return (f'Created with ETA - https://timetag.github.io\\n'\r\n            f'filename: {filename.name}\\n'\r\n            f'binsize: {binsize}\\n'\r\n            f'bins: {bins}\\n'\r\n            )\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        clips = eta.clips(f)\r\n        result=eta.run(clips, group='hydraharp')\r\n        t0=result[\"h0\"]\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        t3=result[\"h3\"]\r\n        t4=result[\"h4\"]\r\n        t5=result[\"h5\"]\r\n        t6=result[\"h6\"]\r\n        t7=result[\"h7\"]\r\n        #hist1=np.sum(t1.reshape(-1, int(float(rebinsize))), axis=1) # apply extra binning (2343)\r\n        #hist2=np.sum(t2.reshape(-1, int(float(rebinsize))), axis=1)\r\n        \r\n        f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n        np.savetxt(f.parent.joinpath(datafolder, f.stem + '_countrate' +  '.txt'), np.transpose([np.arange(t1.size)/3600,t0,t1,t2,t3,t4,t5,t6,t7]), delimiter='\\t', header=info(f))\r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","eta_index_table":"[{\"id\":\"var_templatejkimp1dz\",\"name\":\"file\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"C:/YourFolder/YourFile.timeres\"},{\"id\":\"var_templatejkimp6ts\",\"name\":\"binsize\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"1e12\"},{\"id\":\"var_templatejkimp49t\",\"name\":\"bins\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"3600\"},{\"id\":\"var_templatejkimq3l9\",\"name\":\"rebinsize\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"1\"},{\"id\":\"var_templatekckqkvhi\",\"name\":\"records_per_cut\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"2e5\"},{\"id\":\"dpp_templatejgmfdvub\",\"name\":\"display\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_template_code\",\"name\":\"save txt\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgxmbufn\",\"name\":\"save graph\",\"group\":\"hydraharp\",\"info\":\"\",\"config\":\"\"},{\"id\":\"vi_templatek70723ys\",\"name\":\"timetagger\",\"group\":\"hydraharp\",\"info\":\"ðŸ“œ[0, 1, 2, 3] \",\"config\":\"\"},{\"id\":\"vi_templatejg7rpkiv\",\"name\":\"countrate\",\"group\":\"hydraharp\",\"info\":\"ðŸ“¥[0, 1, 2, 3] \",\"config\":\"\"}]","dpp_templatejgmfdvub":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport logging\r\n\r\nimport numpy as np\r\n\r\nfrom bokeh.application import Application\r\nfrom bokeh.application.handlers.function import FunctionHandler\r\nimport etabackend.tk as etatk\r\n\r\nlogger = logging.getLogger('etabackend.frontend')\r\n\r\nlogger.info(\"ETA realtime is started.\")\r\n\r\n#------ETA PROCESSING-----\r\nrecords_per_cut = int(float(records_per_cut)\r\n                      ) if records_per_cut != \"\" else None\r\n\r\nSIMULATE_GROWTH = False\r\nDATAFOLDER = 'analyzed data'\r\nLABEL = 'Countrate'\r\nline_label = \"Ch\"\r\nfile = Path(file)\r\nbinsize = int(float(binsize))\r\n\r\n#------Evaluate Data-----\r\nclass HistogramResult(etatk.data.ETAResult):\r\n    def calculate_result(self, result):\r\n        import etabackend\r\n        keys = []\r\n        ydata = []\r\n        for key,y_array in result.items():\r\n            keys.append(key)\r\n            if not isinstance(y_array, etabackend.clip.Clip):\r\n                ydata.append(y_array)\r\n        xdata = np.arange(0,result[keys[1]].size)/(60E12/binsize)\r\n        return [xdata]+ydata # attach xdata to beginning of list of ydata\r\n\r\nresult = HistogramResult(file, group=\"hydraharp\", records_per_cut=records_per_cut, \r\n                         kernel=eta, timeout=0.2, \r\n                         simulate_growth=SIMULATE_GROWTH)\r\nbp = etatk.plot.ETABokehPlot(result, result_folder=DATAFOLDER, title=LABEL, line_label=line_label)\r\n\r\nnot_displaying = eta.display(Application(FunctionHandler(bp.bokeh_plot_document)), 'bokeh')\r\nbp.run(not_displaying)\r\n\r\nlogger.info(\"ETA realtime is stopped.\")","dpp_templatejgxmbufn":"#------IMPORTS-----\r\nfrom pathlib import Path\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(float(binsize))\r\npath = Path(file)\r\ngraphsfolder='graphs'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n        clips = eta.clips(f)\r\n        result=eta.run(clips, group='hydraharp')\r\n        t0=result[\"h0\"]\r\n        t1=result[\"h1\"]\r\n        t2=result[\"h2\"]\r\n        t3=result[\"h3\"]\r\n        t4=result[\"h4\"]\r\n        t5=result[\"h5\"]\r\n        t6=result[\"h6\"]\r\n        t7=result[\"h7\"]\r\n        \r\n        x = np.arange(t1.size)/60 #display in h\r\n        p0 = plt.bar(x,t0, width=1/60, color='red')\r\n        p1 = plt.bar(x,t1, width=1/60, bottom= t0, color='crimson')\r\n        p2 = plt.bar(x,t2, width=1/60, bottom= t0+t1, color='navy')\r\n        p3 = plt.bar(x,t3, width=1/60, bottom= t0+t1+t2, color='#bc5090')\r\n        p4 = plt.bar(x,t4, width=1/60, bottom= t0+t1+t2+t3, color='#ffa600')\r\n        p5 = plt.bar(x,t5, width=1/60, bottom= t0+t1+t2+t3+t4, color='#ffa600')\r\n        p6 = plt.bar(x,t6, width=1/60, bottom= t0+t1+t2+t3+t4+t5, color='#ffa600')\r\n        p7 = plt.bar(x,t7, width=1/60, bottom= t0+t1+t2+t3+t4+t5+t6, color='#ffa600')\r\n        \r\n        plt.ylabel('photon events')\r\n        plt.xlabel('time (min)')\r\n        \r\n        \r\n        list_of_title=str(f.stem).split('_')[:-1]\r\n        title='   '.join(list_of_title)\r\n        plt.title(title)\r\n        \r\n        f.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.eps'), format='eps', dpi=1200)\r\n        plt.savefig(f.parent.joinpath(graphsfolder, f.stem + '_countrate' +  '.png'), format='png', dpi=1200)\r\n        \r\n        plt.clf()\r\n        \r\n        eta.send(str(f.name) + ' has been successfully processed')\r\neta.send('FINISHED')","var_templatejkimp1dz":null,"var_templatejkimp49t":null,"var_templatejkimp6ts":null,"var_templatejkimq3l9":null,"ri_templatejkimu3sj":null,"vi_templatek70723ys":"{\"nodes\":[{\"x\":107,\"y\":38,\"fixed\":true,\"initial\":true,\"px\":107,\"py\":38}],\"edges\":[],\"usercode\":\"RFILE(timetagger1,[0,1,2,3,4,5,6,7])\"}","var_templatekckqkvhi":null}